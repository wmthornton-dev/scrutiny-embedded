#!/usr/bin/env python
# encoding: utf-8

APPNAME = 'scrutiny-embedded'
VERSION = '0.2.0'

top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_cxx')
    
    # Add Scrutiny-specific options
    opt.add_option('--support-64bits', action='store', default='1', help='Support 64-bit types (0 or 1, default: 1)')
    opt.add_option('--enable-datalogging', action='store', default='1', help='Enable datalogging feature (0 or 1, default: 1)')
    opt.add_option('--datalogging-max-signal', action='store', default='32', help='Maximum number of datalogging signals (default: 32)')
    opt.add_option('--datalogging-buffer-32bits', action='store', default='0', help='Use 32-bit datalogging buffer (0 or 1, default: 0)')
    opt.add_option('--request-max-process-time-us', action='store', default='100000', help='Max request processing time in microseconds (default: 100000)')
    opt.add_option('--comm-rx-timeout-us', action='store', default='50000', help='RX timeout in microseconds (default: 50000)')
    opt.add_option('--comm-heartbeat-timeout-us', action='store', default='5000000', help='Heartbeat timeout in microseconds (default: 5000000)')
    opt.add_option('--build-test', action='store_true', default=False, help='Build unit tests')
    opt.add_option('--build-testapp', action='store_true', default=False, help='Build test application')
    opt.add_option('--build-c-testapp', action='store_true', default=False, help='Build C test application')

def configure(conf):
    conf.load('compiler_cxx')
    
    # Store configuration options
    conf.env.SUPPORT_64BITS = conf.options.support_64bits
    conf.env.ENABLE_DATALOGGING = conf.options.enable_datalogging
    conf.env.DATALOGGING_MAX_SIGNAL = conf.options.datalogging_max_signal
    conf.env.DATALOGGING_BUFFER_32BITS = conf.options.datalogging_buffer_32bits
    conf.env.REQUEST_MAX_PROCESS_TIME_US = conf.options.request_max_process_time_us
    conf.env.COMM_RX_TIMEOUT_US = conf.options.comm_rx_timeout_us
    conf.env.COMM_HEARTBEAT_TIMEOUT_US = conf.options.comm_heartbeat_timeout_us
    
    # Set C++ standard
    conf.env.CXXFLAGS = ['-std=c++11', '-Wall', '-Wextra']
    
    # Create defines list
    conf.env.SCRUTINY_DEFINES = [
        'SCRUTINY_SUPPORT_64BITS=%s' % conf.env.SUPPORT_64BITS,
        'SCRUTINY_ENABLE_DATALOGGING=%s' % conf.env.ENABLE_DATALOGGING,
        'SCRUTINY_DATALOGGING_MAX_SIGNAL=%s' % conf.env.DATALOGGING_MAX_SIGNAL,
        'SCRUTINY_DATALOGGING_BUFFER_32BITS=%s' % conf.env.DATALOGGING_BUFFER_32BITS,
        'SCRUTINY_REQUEST_MAX_PROCESS_TIME_US=%s' % conf.env.REQUEST_MAX_PROCESS_TIME_US,
        'SCRUTINY_COMM_RX_TIMEOUT_US=%s' % conf.env.COMM_RX_TIMEOUT_US,
        'SCRUTINY_COMM_HEARTBEAT_TIMEOUT_US=%s' % conf.env.COMM_HEARTBEAT_TIMEOUT_US,
    ]
    
    conf.msg('64-bit support', conf.env.SUPPORT_64BITS)
    conf.msg('Datalogging', conf.env.ENABLE_DATALOGGING)

def build(bld):
    # Generate build config header
    config_header = '''// Auto-generated by WAF build system
#ifndef __SCRUTINY_BUILD_CONFIG_H__
#define __SCRUTINY_BUILD_CONFIG_H__

#define SCRUTINY_ACTUAL_PROTOCOL_VERSION SCRUTINY_PROTOCOL_VERSION(1, 0)
#define SCRUTINY_CODEC_TYPE_ID 1
#define SCRUTINY_SUPPORT_64BITS {support_64bits}
#define SCRUTINY_ENABLE_DATALOGGING {enable_datalogging}
#define SCRUTINY_DATALOGGING_MAX_SIGNAL {datalogging_max_signal}
#define SCRUTINY_DATALOGGING_BUFFER_32BITS {datalogging_buffer_32bits}
#define SCRUTINY_REQUEST_MAX_PROCESS_TIME_US {request_max_process_time_us}
#define SCRUTINY_COMM_RX_TIMEOUT_US {comm_rx_timeout_us}
#define SCRUTINY_COMM_HEARTBEAT_TIMEOUT_US {comm_heartbeat_timeout_us}

#endif // __SCRUTINY_BUILD_CONFIG_H__
'''
    config_content = config_header.format(
        support_64bits=bld.env.SUPPORT_64BITS,
        enable_datalogging=bld.env.ENABLE_DATALOGGING,
        datalogging_max_signal=bld.env.DATALOGGING_MAX_SIGNAL,
        datalogging_buffer_32bits=bld.env.DATALOGGING_BUFFER_32BITS,
        request_max_process_time_us=bld.env.REQUEST_MAX_PROCESS_TIME_US,
        comm_rx_timeout_us=bld.env.COMM_RX_TIMEOUT_US,
        comm_heartbeat_timeout_us=bld.env.COMM_HEARTBEAT_TIMEOUT_US
    )
    config_node = bld.path.find_or_declare('scrutiny_build_config.hpp')
    config_node.write(config_content)

    # Scrutiny Embedded Library
    lib_src = bld.path.ant_glob('lib/src/**/*.cpp')
    bld.stlib(
        source=lib_src,
        target='scrutiny-embedded',
        includes=['lib/inc', 'lib/src', '.'],
        export_includes=['lib/inc', '.'],
        cxxflags=['-fPIC'],
        install_path='${PREFIX}/lib',
    )
    bld.install_files('${PREFIX}/include/scrutiny', bld.path.ant_glob('lib/inc/**/*.hpp'), cwd=bld.path.find_dir('lib/inc'), relative_trick=True)
    bld.install_files('${PREFIX}/include/scrutiny', config_node)

    # C-Wrapper
    cwrapper_src = bld.path.ant_glob('cwrapper/*.cpp')
    bld.stlib(
        source=cwrapper_src,
        target='scrutiny-cwrapper',
        includes=['cwrapper', 'lib/inc', '.'],
        use='scrutiny-embedded',
        install_path='${PREFIX}/lib'
    )
    bld.install_files('${PREFIX}/include/scrutiny', bld.path.ant_glob('cwrapper/*.h'))

    # Unit Tests
    if bld.options.build_test:
        test_src = bld.path.ant_glob('test/**/*.cpp')
        bld.program(
            source=test_src,
            target='scrutiny_unittest',
            includes=['test', 'lib/inc', '.'],
            use=['scrutiny-embedded', 'scrutiny-cwrapper']
        )

    # C Test App
    if bld.options.build_c_testapp:
        c_testapp_src = bld.path.ant_glob('projects/c_testapp/src/**/*.c')
        bld.program(
            source=c_testapp_src,
            target='c_testapp',
            includes=['projects/c_testapp/include', 'cwrapper', 'lib/inc', '.'],
            use=['scrutiny-cwrapper', 'scrutiny-embedded']
        )

    # C++ Test App
    if bld.options.build_testapp:
        testapp_src = bld.path.ant_glob('projects/testapp/src/**/*.cpp')
        bld.program(
            source=testapp_src,
            target='testapp',
            includes=['projects/testapp/include', 'lib/inc', '.'],
            use='scrutiny-embedded'
        )
